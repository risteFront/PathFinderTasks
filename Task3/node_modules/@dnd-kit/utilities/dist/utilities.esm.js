import { useMemo, useLayoutEffect, useEffect, useRef, useCallback } from 'react';

function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  return useMemo(function () {
    return function (node) {
      refs.forEach(function (ref) {
        return ref(node);
      });
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  refs);
}

// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js
var canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';

/**
 * A hook that resolves to useEffect on the server and useLayoutEffect on the client
 * @param callback {function} Callback function that is invoked when the dependencies of the hook change
 */

var useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;

function useInterval() {
  var intervalRef = useRef(null);
  var set = useCallback(function (listener, duration) {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  var clear = useCallback(function () {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set, clear];
}

function useLazyMemo(callback, dependencies) {
  var valueRef = useRef();
  return useMemo(function () {
    var newValue = callback(valueRef.current);
    valueRef.current = newValue;
    return newValue;
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [].concat(dependencies));
}

function useNodeRef() {
  var node = useRef(null);
  var setNodeRef = useCallback(function (element) {
    node.current = element;
  }, []);
  return [node, setNodeRef];
}

var ids = {};
function useUniqueId(prefix, value) {
  return useMemo(function () {
    if (value) {
      return value;
    }

    var id = ids[prefix] == null ? 0 : ids[prefix] + 1;
    ids[prefix] = id;
    return prefix + "-" + id;
  }, [prefix, value]);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createAdjustmentFn(modifier) {
  return function (object) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }

    return adjustments.reduce(function (accumulator, adjustment) {
      var entries = Object.entries(adjustment);

      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
        var _entries$_i = _entries[_i],
            key = _entries$_i[0],
            valueAdjustment = _entries$_i[1];
        var value = accumulator[key];

        if (value != null) {
          accumulator[key] = value + modifier * valueAdjustment;
        }
      }

      return accumulator;
    }, _extends({}, object));
  };
}

var add = /*#__PURE__*/createAdjustmentFn(1);
var subtract = /*#__PURE__*/createAdjustmentFn(-1);

var CSS = /*#__PURE__*/Object.freeze({
  Translate: {
    toString: function toString(transform) {
      if (!transform) {
        return;
      }

      var x = transform.x,
          y = transform.y;
      return "translate3d(" + (x ? Math.round(x) : 0) + "px, " + (y ? Math.round(y) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString: function toString(transform) {
      if (!transform) {
        return;
      }

      var scaleX = transform.scaleX,
          scaleY = transform.scaleY;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString: function toString(transform) {
      if (!transform) {
        return;
      }

      return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');
    }
  },
  Transition: {
    toString: function toString(_ref) {
      var property = _ref.property,
          duration = _ref.duration,
          easing = _ref.easing;
      return property + " " + duration + "ms " + easing;
    }
  }
});

export { CSS, add, canUseDOM, subtract, useCombinedRefs, useInterval, useIsomorphicLayoutEffect, useLazyMemo, useNodeRef, useUniqueId };
//# sourceMappingURL=utilities.esm.js.map
