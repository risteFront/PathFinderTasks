export declare type Arguments<T> = T extends (...args: infer U) => any ? U : never;
export declare type ArgumentAtIndex<Func, Index extends keyof Arguments<Func>> = Arguments<Func>[Index];
export declare type FirstArgument<T> = ArgumentAtIndex<T, 0>;
export declare type Without<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
