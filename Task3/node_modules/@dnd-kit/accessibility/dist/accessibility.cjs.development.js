'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

var hiddenStyles = {
  display: 'none'
};
function HiddenText(_ref) {
  var id = _ref.id,
      value = _ref.value;
  return React__default.createElement("div", {
    id: id,
    style: hiddenStyles
  }, value);
}

var visuallyHidden = {
  position: 'absolute',
  width: 1,
  height: 1,
  margin: -1,
  border: 0,
  padding: 0,
  overflow: 'hidden',
  clip: 'rect(0 0 0 0)',
  clipPath: 'inset(100%)'
};
function LiveRegion(_ref) {
  var id = _ref.id,
      entries = _ref.entries;
  return React__default.createElement("div", {
    id: id,
    style: visuallyHidden,
    "aria-live": "assertive",
    "aria-relevant": "additions",
    "aria-atomic": true
  }, entries.map(function (_ref2) {
    var id = _ref2[0],
        entry = _ref2[1];
    return React__default.createElement("span", {
      key: id.toString()
    }, entry);
  }));
}

var timeout = 1e3; // 1 second

function useAnnouncement() {
  var _useState = React.useState(new Map()),
      announcementMap = _useState[0],
      setAnnouncements = _useState[1];

  var announce = React.useCallback(function (announcement) {
    setAnnouncements(function (announcements) {
      var timeoutId = setTimeout(function () {
        setAnnouncements(function (announcements) {
          announcements["delete"](timeoutId);
          return new Map(announcements);
        });
      }, timeout);
      announcements.set(timeoutId, announcement);
      return new Map(announcements);
    });
  }, []);
  var announcementMapRef = React.useRef(announcementMap);
  var entries = React.useMemo(function () {
    return Array.from(announcementMap.entries());
  }, [announcementMap]);
  React.useEffect(function () {
    announcementMapRef.current = announcementMap;
  }, [announcementMap]);
  React.useEffect(function () {
    return function () {
      // Clean up any queued `setTimeout` calls on unmount
      // eslint-disable-next-line react-hooks/exhaustive-deps
      announcementMapRef.current.forEach(function (_, key) {
        clearTimeout(key);
      });
    };
  }, []);
  return {
    announce: announce,
    entries: entries
  };
}

exports.HiddenText = HiddenText;
exports.LiveRegion = LiveRegion;
exports.useAnnouncement = useAnnouncement;
//# sourceMappingURL=accessibility.cjs.development.js.map
