{"version":3,"file":"accessibility.cjs.production.min.js","sources":["../src/components/HiddenText/HiddenText.tsx","../src/components/LiveRegion/LiveRegion.tsx","../src/hooks/useAnnouncement.ts"],"sourcesContent":["import React from 'react';\n\ninterface Props {\n  id: string;\n  value: string;\n}\n\nconst hiddenStyles: React.CSSProperties = {\n  display: 'none',\n};\n\nexport function HiddenText({id, value}: Props) {\n  return (\n    <div id={id} style={hiddenStyles}>\n      {value}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport interface Props {\n  id: string;\n  entries: [NodeJS.Timeout, string][];\n}\n\n// Hide element visually but keep it readable by screen readers\nconst visuallyHidden: React.CSSProperties = {\n  position: 'absolute',\n  width: 1,\n  height: 1,\n  margin: -1,\n  border: 0,\n  padding: 0,\n  overflow: 'hidden',\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(100%)',\n};\n\nexport function LiveRegion({id, entries}: Props) {\n  return (\n    <div\n      id={id}\n      style={visuallyHidden}\n      aria-live=\"assertive\"\n      aria-relevant=\"additions\"\n      aria-atomic\n    >\n      {entries.map(([id, entry]) => (\n        <span key={id.toString()}>{entry}</span>\n      ))}\n    </div>\n  );\n}\n","import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\n\nconst timeout = 1e3; // 1 second\n\nexport function useAnnouncement() {\n  const [announcementMap, setAnnouncements] = useState(\n    new Map<NodeJS.Timeout, string>()\n  );\n  const announce = useCallback((announcement: string) => {\n    setAnnouncements((announcements) => {\n      const timeoutId = setTimeout(() => {\n        setAnnouncements((announcements) => {\n          announcements.delete(timeoutId);\n\n          return new Map(announcements);\n        });\n      }, timeout);\n\n      announcements.set(timeoutId, announcement);\n\n      return new Map(announcements);\n    });\n  }, []);\n  const announcementMapRef = useRef(announcementMap);\n  const entries = useMemo(() => Array.from(announcementMap.entries()), [\n    announcementMap,\n  ]);\n\n  useEffect(() => {\n    announcementMapRef.current = announcementMap;\n  }, [announcementMap]);\n\n  useEffect(() => {\n    return () => {\n      // Clean up any queued `setTimeout` calls on unmount\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      announcementMapRef.current.forEach((_, key) => {\n        clearTimeout(key);\n      });\n    };\n  }, []);\n\n  return {announce, entries} as const;\n}\n"],"names":["hiddenStyles","display","visuallyHidden","position","width","height","margin","border","padding","overflow","clip","clipPath","React","id","style","value","entries","map","entry","key","toString","useState","Map","announcementMap","setAnnouncements","announce","useCallback","announcement","announcements","timeoutId","setTimeout","set","announcementMapRef","useRef","useMemo","Array","from","useEffect","current","forEach","_","clearTimeout"],"mappings":"oJAOMA,EAAoC,CACxCC,QAAS,QCALC,EAAsC,CAC1CC,SAAU,WACVC,MAAO,EACPC,OAAQ,EACRC,QAAS,EACTC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVC,KAAM,gBACNC,SAAU,qDDJRC,uBAAKC,KAFmBA,GAEXC,MAAOd,KAFQe,8CCW5BH,uBACEC,KAHsBA,GAItBC,MAAOZ,cACG,4BACI,gCANYc,QASjBC,KAAI,gBAAMC,cACjBN,wBAAMO,SAAQC,YAAaF,gCC1BnC,iBAC8CG,WAC1C,IAAIC,KADCC,OAAiBC,OAGlBC,EAAWC,eAAY,SAACC,GAC5BH,GAAiB,SAACI,OACVC,EAAYC,YAAW,WAC3BN,GAAiB,SAACI,UAChBA,SAAqBC,GAEd,IAAIP,IAAIM,QAZT,YAgBVA,EAAcG,IAAIF,EAAWF,GAEtB,IAAIL,IAAIM,QAEhB,IACGI,EAAqBC,SAAOV,GAC5BP,EAAUkB,WAAQ,kBAAMC,MAAMC,KAAKb,EAAgBP,aAAY,CACnEO,WAGFc,aAAU,WACRL,EAAmBM,QAAUf,IAC5B,CAACA,IAEJc,aAAU,kBACD,WAGLL,EAAmBM,QAAQC,SAAQ,SAACC,EAAGrB,GACrCsB,aAAatB,SAGhB,IAEI,CAACM,SAAAA,EAAUT,QAAAA"}